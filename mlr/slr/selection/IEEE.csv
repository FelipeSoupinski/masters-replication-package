"Document Title",Authors,"Author Affiliations","Publication Title",Date Added To Xplore,"Publication Year","Volume","Issue","Start Page","End Page","Abstract","ISSN",ISBNs,"DOI",Funding Information,PDF Link,"Author Keywords","IEEE Terms","INSPEC Controlled Terms","INSPEC Non-Controlled Terms","Mesh_Terms",Article Citation Count,Patent Citation Count,"Reference Count","License",Online Date,Issue Date,"Meeting Date","Publisher",Document Identifier
"Social Networks during Software Ecosystems’ Death","P. Arantes; F. Soupinski; A. Fontão","FACOM/UFMS, Campo Grande, MS, Brazil; FACOM/UFMS, Campo Grande, MS, Brazil; FACOM/UFMS, Campo Grande, MS, Brazil","2023 IEEE/ACM 11th International Workshop on Software Engineering for Systems-of-Systems and Software Ecosystems (SESoS)","27 Jul 2023","2023","","","9","12","Software Ecosystems (SECO) depend on platforms that serve as environments for developers’ interaction. The SECO may die when the organization that owns the platform does not support the synergy between organizational goals and developers’ expectations. The death results in the suspension of vital activities, such as code development and maintenance, impacting developers who lose work, learning, and experience gained. On the other hand, the responsible corporation loses resources invested in SECO. These signs indicate a SECO death is an important event for the community and should be analyzed. This paper reports a GitHub (GH) study focusing on three web SECOs: AngularJS, PhantomJS, and MomentJS. We analyze metrics based on developer community engagement and collaboration to understand what happens in these SECOs before, during, and after the platform’s death. From the search questions, we found some directions: Users’ recruitment and permanence: Without management and engagement, communities get out of SECOS a few years after your entry, so methods to control and organize the community are needed. Community relationships: The community needs engagement to strengthen and maintain your relationships. Some types of programs are useful methods to engage and encourage users to collaborate between them.","","979-8-3503-0174-8","10.1109/SESoS59159.2023.00007","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10190619","software ecosystem;death platform;death ecosystem","Measurement;Social networking (online);Ecosystems;Focusing;Organizations;Maintenance engineering;Software","software maintenance","AngularJS;code development;code maintenance;developer community engagement;GitHub;MomentJS;organizational goals;PhantomJS;SECO death;social networks;software ecosystems;user permanence;user recruitment;Web SECOs","","","","6","IEEE","27 Jul 2023","","","IEEE","IEEE Conferences"
"Program Learning Using Static Information and Dynamic Program Execution Slices","J. Sawamoto; E. Sugino; N. Segawa; Y. Wada","Faculty of Software and Information Science Department, Iwate Prefectural University, Iwate, Japan; Faculty of Software and Information Science Department, Iwate Prefectural University, Iwate, Japan; Faculty of Software and Information Science Department, Iwate Prefectural University, Iwate, Japan; Department of Information Environment, Tokyo Denki University, Inzai, Chiba, Japan","2010 IEEE 24th International Conference on Advanced Information Networking and Applications Workshops","7 Jun 2010","2010","","","157","162","Nowadays, we can easily obtain a copy of practically any used program in our open source community for learning. However, the reality is that the level of such practically used programs is often complex and of such a large scale so that it is not as easy to understand them as one might expect. We believe that we do need some kind of environment to help the learner read and understand programs. Learning programs is necessary for other reasons such as program maintenance, reuse of programs. In this research, we built a model to use for program understanding. Using it, we examined possible ways of supporting program learning. Based on that, the objective of this paper is to present our efforts at developing a program learning environment, which helps narrow down the scope of a program to facilitate reading and understanding it while finding the differences of such dynamic information, as found in the program execution history, and also provide an environment in which the learner can use static information. We evaluate the efficiency of the proposed program learning environment through experiments.","","978-1-4244-6702-0","10.1109/WAINA.2010.15","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5480864","program understanding;program learning;execution history;program reuse;program maintenance","History;Large-scale systems;Application software;Conferences;Open source software;Information science;Costs;Programming;Documentation","learning systems;programming environments;public domain software;software maintenance;software reusability","static information;dynamic program execution slices;open source community;practically used programs;program maintenance;program reusability;program understanding;program learning environment;dynamic information;program execution history;learner","","","","9","IEEE","7 Jun 2010","","","IEEE","IEEE Conferences"
"Company Health in Mobile Software Ecosystem (MSECO): Research Perspectives and Challenges","M. I. Calderon Ribeiro; A. C. Dias-Neto","Computer Institute: ICOMP, UFAM, Manaus, Brazil; Computer Institute: ICOMP, UFAM, Manaus, Brazil","2017 IEEE/ACM Joint 5th International Workshop on Software Engineering for Systems-of-Systems and 11th Workshop on Distributed Software Development, Software Ecosystems and Systems-of-Systems (JSOS)","29 Jun 2017","2017","","","74","75","This paper presents initial perspectives in the searchfor diagnosing the health of a Mobile Software Ecosystem(MSECO) company. The research intends to investigate a companys health through user reviews about mobile applications (Apps)and build and present indicators that can identify problems, failures and differences in the quality of the apps to guide thecompany in the search for ""immunization"" or ""medication"" sothat it does not become ""sick"" from the adoption of measuresrelated to the use of indicators for the type of ""disease"".","","978-1-5386-2799-0","10.1109/JSOS.2017.3","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7961699","Health;MSECO;indicator;Diagnosis","Ecosystems;Software;Companies;Data mining;Software engineering;Mobile communication;Conferences","mobile computing;software fault tolerance;software houses;software quality","software medication;software immunization;mobile application quality;mobile software ecosystem company health diagnosis;MSECO","","2","","16","IEEE","29 Jun 2017","","","IEEE","IEEE Conferences"
"TypeScript’s Evolution: An Analysis of Feature Adoption Over Time","J. D. Scarsbrook; M. Utting; R. K. L. Ko","School of Information Technology and Electrical Engineering, The University of Queensland, Brisbane, Australia; School of Information Technology and Electrical Engineering, The University of Queensland, Brisbane, Australia; School of Information Technology and Electrical Engineering, The University of Queensland, Brisbane, Australia","2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR)","12 Jul 2023","2023","","","109","114","TypeScript is a quickly evolving superset of JavaScript with active development of new features. Our paper seeks to understand how quickly these features are adopted by the developer community. Existing work in JavaScript shows the adoption of dynamic language features can be a major hindrance to static analysis. As TypeScript evolves the addition of features makes the underlying standard more and more difficult to keep up with. In our work we present an analysis of 454 open source TypeScript repositories and study the adoption of 13 language features over the past three years. We show that while new versions of the TypeScript compiler are aggressively adopted by the community, the same cannot be said for language features. While some experience strong growth others are rarely adopted by projects. Our work serves as a starting point for future study of the adoption of features in TypeScript. We also release our analysis and data gathering software as open source in the hope it helps the programming languages community.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00027","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174097","TypeScript;JavaScript;Data Mining","Computer languages;Codes;Ecosystems;Static analysis;Software;Data mining;Standards","Java;program compilers;program diagnostics","454 open source TypeScript repositories;active development;developer community;dynamic language features;feature adoption;JavaScript;programming languages community;quickly evolving superset;static analysis;TypeScript compiler;TypeScript's evolution;underlying standard","","","","19","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Towards a new digital business operating system: Speed, data, ecosystems, and empowerment (keynote)","J. Bosch","Department of Computer Science and Engineering, Chalmers University of Technology, Gothenburg, Sweden","2018 IEEE 25th International Conference on Software Analysis, Evolution and Reengineering (SANER)","5 Apr 2018","2018","","","2","2","We are living in the most exciting time in the history of mankind. The last century has seen unprecedented improvements in the quality of the human condition and technology is at the heart of this progress. Now we are experiencing an even bigger leap as we move towards a new level of digitalization and automation. Ranging from self-driving cars to factories without workers to societal infrastructure, every sensor and actuator is becoming connected and new applications that enable new opportunities are appearing daily. The fuel of this emerging connected, software-driven reality is software and the key challenge is to continuously deliver value to customers. The future of software engineering in this context is centered around a new, emerging digital business operating system consisting of four dimensions: Speed, Data, Ecosystems and Empowerment. The focus on speed is concerned with the constantly increasing rate of deploying new software in the field. This continuous integration and deployment is no longer only the purview of internet companies but is also increasingly deployed in embedded systems. Second, data is concerned with the vast amounts of information collected from systems deployed in the field and the behavior of the users of these systems. Software businesses need to significantly improve their ability to exploit the value present in that data. Third, ecosystems are concerned with the transition in many companies from doing everything in-house to strategic use of innovation partners and commodity providing partners. Finally, we need new ways of organizing work in this new, digital age. The keynote discusses these four main developments but focuses on the continuous software engineering. Also, the keynote provides numerous examples from the Nordic and international industry and predicts the next steps that industry and academia need to engage in to remain competitive.","","978-1-5386-4969-5","10.1109/SANER.2018.8330190","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8330190","Speed;data-driven development;software ecosystems;empowered organization","Software;Ecosystems;Technological innovation;Companies;Software architecture;Industries;Urban areas","","","","","","","IEEE","5 Apr 2018","","","IEEE","IEEE Conferences"
"A Large-Scale Security-Oriented Static Analysis of Python Packages in PyPI","J. Ruohonen; K. Hjerppe; K. Rindell","University of Turku, Finland; University of Turku, Finland; University of Turku, Finland","2021 18th International Conference on Privacy, Security and Trust (PST)","21 Dec 2021","2021","","","1","10","Different security issues are a common problem for open source packages archived to and delivered through software ecosystems. These often manifest themselves as software weaknesses that may lead to concrete software vulnerabilities. This paper examines various security issues in Python packages with static analysis. The dataset is based on a snapshot of all packages stored to the Python Package Index (PyPI). In total, over 197 thousand packages and over 749 thousand security issues are covered. Even under the constraints imposed by static analysis, (a) the results indicate prevalence of security issues; at least one issue is present for about 46% of the Python packages. In terms of the issue types, (b) exception handling and different code injections have been the most common issues. The subprocess module stands out in this regard. Reflecting the generally small size of the packages, (c) software size metrics do not predict well the amount of issues revealed through static analysis. With these results and the accompanying discussion, the paper contributes to the field of large-scale empirical studies for better understanding security problems in software ecosystems.","","978-1-6654-0184-5","10.1109/PST52912.2021.9647791","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9647791","Bug;defect;issue;smell;vulnerability;weakness;repository;ecosystem;static analysis;linting;Bandit;PyPI","Measurement;Privacy;Codes;Ecosystems;Static analysis;Software;Security","program diagnostics;Python;security of data;software maintenance;software metrics;software packages","large-scale security-oriented static analysis;PyPI;open source packages;software ecosystems;software weaknesses;concrete software vulnerabilities;Python package index;software size metrics","","8","","80","IEEE","21 Dec 2021","","","IEEE","IEEE Conferences"
"Assessing open source communities' health using Service Oriented Computing concepts","M. Oriol; O. Franco-Bedoya; X. Franch; J. Marco","Universitat Politecnica de Catalunya, Barcelona, Catalunya, ES; Universitat Politecnica de Catalunya, Barcelona, Catalunya, ES; Universitat Politecnica de Catalunya, Barcelona, Catalunya, ES; Universitat Politecnica de Catalunya, Barcelona, Catalunya, ES","2014 IEEE Eighth International Conference on Research Challenges in Information Science (RCIS)","21 Jul 2014","2014","","","1","6","The quality of Open Source Software products is directly related to its community's health. To date, health analysis is made accessing available data repositories or using software management tools that are often too static or ad hoc. To address this issue, we propose to adopt principles and methods from the Service Oriented Computing field. Particularly, we propose to adapt the concepts of quality service and service level agreement, and propose to reuse the existing body of knowledge and techniques from SOC monitoring. To demonstrate the feasibility of the approach, we use a service monitoring framework called SALMonOSS as a proof of concept to realize the implementation of the proposal.","2151-1357","978-1-4799-2393-9","10.1109/RCIS.2014.6861064","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6861064","Monitoring;Open Source Software;Community Health;OSS;SOC","Monitoring;Communities;System-on-chip;Measurement;Software;Instruments;Quality of service","contracts;health care;medical administrative data processing;public domain software;software quality","open source community health;service oriented computing concepts;open source software product quality;health analysis;data repositories;software management tools;quality service;service level agreement;SALMonOSS framework;service monitoring framework","","4","","31","IEEE","21 Jul 2014","","","IEEE","IEEE Conferences"
"Structure and Evolution of Package Dependency Networks","R. Kikas; G. Gousios; M. Dumas; D. Pfahl","University of Tartu, Tartu, Estonia; Delft University of Technology, Delft, The Netherlands; University of Tartu, Tartu, Estonia; University of Tartu, Tartu, Estonia","2017 IEEE/ACM 14th International Conference on Mining Software Repositories (MSR)","3 Jul 2017","2017","","","102","112","Software developers often include available open-source software packages into their projects to minimize redundant effort. However, adding a package to a project can also introduce risks, which can propagate through multiple levels of dependencies. Currently, not much is known about the structure of open-source package ecosystems of popular programming languages and the extent to which transitive bug propagation is possible. This paper analyzes the dependency network structure and evolution of the JavaScript, Ruby, and Rust ecosystems. The reported results reveal significant differences across language ecosystems. The results indicate that the number of transitive dependencies for JavaScript has grown 60% over the last year, suggesting that developers should look more carefully into their dependencies to understand what exactly is included. The study also reveals that vulnerability to a removal of the most popular package is increasing, yet most other packages have a decreasing impact on vulnerability. The findings of this study can inform the development of dependency management tools.","","978-1-5386-1544-7","10.1109/MSR.2017.55","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7962360","software evolution;dependency management;software ecosystems;mining software repositories","Ecosystems;Computer languages;Computer bugs;Tools;Libraries;Software packages","public domain software;software maintenance;software packages;system recovery","package dependency network structure;package dependency network evolution;redundant effort minimization;open-source package ecosystems;programming languages;transitive bug propagation;JavaScript ecosystem;Ruby ecosystem;Rust ecosystem;language ecosystems;number-of-transitive dependencies;dependency management tool development","","81","","30","IEEE","3 Jul 2017","","","IEEE","IEEE Conferences"
"Feature-oriented development in industrial automation software ecosystems: Development scenarios and tool support","H. Prähofer; D. Rabiser; F. Angerer; P. Grünbacher; P. Feichtinger","Institute for System Software, Johannes Kepler University Linz, Austria; Christian Doppler Laboratory MEVSS, Johannes Kepler University Linz, Austria; Christian Doppler Laboratory MEVSS, Johannes Kepler University Linz, Austria; Christian Doppler Laboratory MEVSS, Johannes Kepler University Linz, Austria; Christian Doppler Laboratory MEVSS, Johannes Kepler University Linz, Austria","2016 IEEE 14th International Conference on Industrial Informatics (INDIN)","19 Jan 2017","2016","","","1218","1223","Due to increased market demands for highly customized and machine-specific solutions in manufacturing, industrial software systems are often developed as software product lines (SPL) and organized as software ecosystems (SECO) with internal and external developers composing individual solutions based on a common technological platform. In such settings, software development usually occurs in a multistage process: system variants initially derived from a platform are adapted and extended to meet specific requirements. This common approach, however, results in significant challenges for software development and maintenance. In this paper we review key challenges we have been observing when investigating our industrial partner's software ecosystems. We then present a feature-oriented development approach we have been developing to tackle those. Our approach is backed with static analysis methods to deal with system variants and versions created in software maintenance.","2378-363X","978-1-5090-2870-2","10.1109/INDIN.2016.7819353","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7819353","","Software;Automation;Computational modeling;Hardware;Analytical models;Ecosystems;Oils","factory automation;production engineering computing;program diagnostics;software maintenance;software product lines","feature-oriented development;industrial automation software ecosystems;industrial software systems;software product lines;SPL;SECO;software development;software maintenance;static analysis methods","","5","","29","IEEE","19 Jan 2017","","","IEEE","IEEE Conferences"
"Whole Person Integrated Care (WPIC): A healthcare transformation strategy supported by a novel spreadsheet-based software framework","S. E. Beller; S. J. Monatesti; P. Bachman","National Health Data Systems, NY, USA; ES Enterprises, PA, USA; Cequs, PA, USA","2017 IEEE Global Humanitarian Technology Conference (GHTC)","25 Dec 2017","2017","","","1","10","This paper describes a humanitarian healthcare transformation strategy called Whole Person Integrated Care (WPIC). WPIC couples a Spreadsheet-based Software Framework (SSF) and a care delivery model that focus on increasing efficiency and effectiveness through evidence-based knowledge and action. This strategy: 1) integrates “sick care” (treatment of health problems) with “well care” (prevention and self-management) and 2) addresses both physical and psychological problems affecting a patient's health. The SSF currently utilizes Microsoft Excel to create simple, low-cost, and flexible software solutions that capture, import, export, transform, integrate, organize, store, analyze, render, and exchange data and information. Using a node-to-node (point-to-point) network architecture, clinicians, researchers, patients, and others can connect securely and resiliently, anywhere and anytime, across national and organizational boundaries. This allows collaborators to build, share, evaluate, and evolve evidence-based knowledge and analytic models. The shared knowledge and models are used to make projections, reveal existing problems, identify risks, and offer solutions that support decisions for clinical and business process improvement. The paper also describes an SSF application recently piloted in a Federal health information technology program, and proposes an open source community.","","978-1-5090-6046-7","10.1109/GHTC.2017.8239223","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8239223","analytical;biopsychosocial;collaboration;data exchange;decision support;framework;health information technology;healthcare;models;network architecture","Software;Medical services;Data models;Mathematical model;Psychology;Collaboration;Adaptation models","health care;medical information systems;psychology;spreadsheet programs","spreadsheet;software framework;humanitarian healthcare transformation strategy;WPIC couples;SSF;care delivery model;evidence-based knowledge;sick care;health problems;physical problems;psychological problems;patient;flexible software solutions;shared knowledge;Federal health information technology program;Whole Person Integrated Care;node-to-node network architecture;point-to-point network architecture","","","","44","IEEE","25 Dec 2017","","","IEEE","IEEE Conferences"
"Empirical Analysis of Security Vulnerabilities in Python Packages","M. Alfadel; D. E. Costa; E. Shihab","Data-driven Analysis of Software (DAS) Lab, Concordia University, Montreal, Canada; Data-driven Analysis of Software (DAS) Lab, Concordia University, Montreal, Canada; Data-driven Analysis of Software (DAS) Lab, Concordia University, Montreal, Canada","2021 IEEE International Conference on Software Analysis, Evolution and Reengineering (SANER)","11 May 2021","2021","","","446","457","Software ecosystems play an important role in modern software development, providing an open platform of reusable packages that speed up and facilitate development tasks. However, this level of code reusability supported by software ecosystems also makes the discovery of security vulnerabilities much more difficult, as software systems depend on an increasingly high number of packages. Recently, security vulnerabilities in the npm ecosystem, the ecosystem of Node.js packages, have been studied in the literature. As different software ecosystems embodied different programming languages and particularities, we argue that it is also important to study other popular programming languages to build stronger empirical evidence about vulnerabilities in software ecosystems.In this paper, we present an empirical study of 550 vulnerability reports affecting 252 Python packages in the Python ecosystem (PyPi). In particular, we study the propagation and life span of security vulnerabilities, accounting for how long they take to be discovered and fixed. Our findings show that the discovered vulnerabilities in Python packages are increasing over time, and they take more than 3 years to be discovered. The majority of these vulnerabilities (50.55%) are only fixed after being publicly announced, giving ample time for attackers exploitation. We find similarities in some characteristics of vulnerabilities in PyPi and npm and divergences that can be attributed to specific PyPi policies. By leveraging our findings, we provide a series of implications that can help the security of software ecosystems by improving the process of discovering, fixing and managing package vulnerabilities.","1534-5351","978-1-7281-9630-5","10.1109/SANER50967.2021.00048","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9425974","python;pypi;packages;vulnerabilities;empirical studies","Software packages;Conferences;Ecosystems;Tools;Software systems;Software;Timing","ecology;project management;public domain software;security of data;software packages;software reusability","software systems;security vulnerabilities;npm ecosystem;vulnerability reports;Python packages;Python ecosystem;discovered vulnerabilities;modern software development;reusable packages;software ecosystems;package vulnerabilities management;time 3.0 year","","27","","65","IEEE","11 May 2021","","","IEEE","IEEE Conferences"
"Dependency Smells in JavaScript Projects","A. J. Jafari; D. E. Costa; R. Abdalkareem; E. Shihab; N. Tsantalis","Department of Computer Science and Software Engineering, Data-Driven Analysis of Software (DAS) Lab, Concordia University, Montreal, QC, Canada; Department of Computer Science and Software Engineering, Data-Driven Analysis of Software (DAS) Lab, Concordia University, Montreal, QC, Canada; School of Computer Science, Carleton University, Ottawa, ON, Canada; Department of Computer Science and Software Engineering, Data-Driven Analysis of Software (DAS) Lab, Concordia University, Montreal, QC, Canada; Department of Computer Science and Software Engineering, Concordia University, Montreal, QC, Canada","IEEE Transactions on Software Engineering","18 Oct 2022","2022","48","10","3790","3807","Dependency management in modern software development poses many challenges for developers who wish to stay up to date with the latest features and fixes whilst ensuring backwards compatibility. Project maintainers have opted for varied, and sometimes conflicting, approaches for maintaining their dependencies. Opting for unsuitable approaches can introduce bugs and vulnerabilities into the project, introduce breaking changes, cause extraneous installations, and reduce dependency understandability, making it harder for others to contribute effectively. In this paper, we empirically examine evidence of recurring dependency management issues (dependency smells). We look at the commit data for a dataset of 1,146 active JavaScript repositories to catalog, quantify and understand dependency smells. Through a series of surveys with practitioners, we identify and quantify seven dependency smells with varying degrees of popularity and investigate why they are introduced throughout project history. Our findings indicate that dependency smells are prevalent in JavaScript projects with two or more distinct smells appearing in 80 percent of the projects, but they generally infect a minority of a project’s dependencies. Our observations show that the number of dependency smells tend to increase over time. Practitioners agree that dependency smells bring about many problems including security threats, bugs, dependency breakage, runtime errors, and other maintenance issues. These smells are generally introduced as developers react to dependency misbehaviour and the shortcomings of the npm ecosystem.","1939-3520","","10.1109/TSE.2021.3106247","Concordia University's Faculty Research & Ethics Advisory Committee(grant numbers:30004729); Natural Sciences and Engineering Research Council of Canada; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9519532","Dependency smells;software ecosystems;dependency management;npm","Ecosystems;Guidelines;Semantics;Runtime;Tools;Computer science;Computer bugs","formal specification;Java;program debugging;security of data;software maintenance","dependency breakage;dependency management issues;dependency misbehaviour;dependency smells;dependency understandability;javascript projects;JavaScript repositories;maintenance issues;npm ecosystem;project history;project maintainers;security threats","","8","","51","IEEE","19 Aug 2021","","","IEEE","IEEE Journals"
"Toward Using Package Centrality Trend to Identify Packages in Decline","S. Mujahid; D. E. Costa; R. Abdalkareem; E. Shihab; M. A. Saied; B. Adams","Data-Driven Analysis of Software (DAS) Lab at the Department of Computer Science and Software Engineering, Concordia University, Montreal, QC, Canada; Data-Driven Analysis of Software (DAS) Lab at the Department of Computer Science and Software Engineering, Concordia University, Montreal, QC, Canada; School of Computer Science, Carleton University, Ottawa, ON, Canada; Data-Driven Analysis of Software (DAS) Lab at the Department of Computer Science and Software Engineering, Concordia University, Montreal, QC, Canada; Department of Computer Science and Software Engineering, Laval University, Quebec City, QC, Canada; School of Computing, Queen’s University, Kingston, ON, Canada","IEEE Transactions on Engineering Management","3 Nov 2022","2022","69","6","3618","3632","Due to their increasing complexity, today’s software systems are frequently built by leveraging reusable code in the form of libraries and packages. Software ecosystems (e.g., npm) are the primary enablers of this code reuse, providing developers with a platform to share their own and use others’ code. These ecosystems evolve rapidly: developers add new packages every day to solve new problems or provide alternative solutions, causing obsolete packages to decline in their importance to the community. Developers should avoid depending on packages in decline, as these packages are reused less over time and may become less frequently maintained. However, current popularity metrics (e.g., Stars, and Downloads) are not fit to provide this information to developers because their semantics do not aptly capture shifts in the community interest. In this article, we propose a scalable approach that uses the package’s centrality in the ecosystem to identify packages in decline. We evaluate our approach with the npm ecosystem and show that the trends of centrality over time can correctly distinguish packages in decline with an ROC–AUC of 0.9. The approach can capture 87% of the packages in decline, on average 18 months before the trend is shown in currently used package popularity metrics. We implement this approach in a tool that can be used to augment the npms metrics and help developers avoid packages in decline when reusing packages from npm.","1558-0040","","10.1109/TEM.2021.3122012","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9631870","Dependency graph;JavaScript;package quality;package in decline;npm","Ecosystems;Software systems;Scalability;Software development management","object-oriented programming;public domain software;software maintenance;software packages;software reusability","obsolete packages;package centrality trend;package popularity metrics;reusable code;reusing packages;software ecosystems","","4","","67","IEEE","1 Dec 2021","","","IEEE","IEEE Journals"
"Maximizing the Efficiency of Automotive Software Development Environment Using Open Source Technologies","S. Niæetin; R. Šandor; G. Stupar; N. Tesliæ","RT-RK Institure for Computer Based Systems, Novi Sad, Serbia; RT-RK Institure for Computer Based Systems, Novi Sad, Serbia; Faculty of Technical Sciences, Novi Sad, Serbia; Faculty of Technical Sciences, Novi Sad, Serbia","2018 IEEE 8th International Conference on Consumer Electronics - Berlin (ICCE-Berlin)","16 Dec 2018","2018","","","1","3","The automotive industry is undergoing dramatic changes nowadays. New functionalities, such as complex digital cockpit solutions, driver assistance algorithms and more, are all software based. The shortening of the development time while maintaining a high quality of software releases is an uneasy task. Many solutions in this regard exist in the industry. However, the cost prevents the wider developer community from participating on fair terms. In this paper, we argue that many open source technologies and frameworks can be utilized in addition to field proven automotive development software. This way the total cost of the development, and time needed for testing and error checking can be reduced. Specifically, we extend the basic development process by utilizing open source build automation tools and servers to decrease the build and unit test time, and incorporate code based analysis tools for static and dynamic analysis. These tools increase the software quality, and can be combined with commercial application life cycle management tools, which are already used in the automotive industry.","2166-6822","978-1-5386-6095-9","10.1109/ICCE-Berlin.2018.8576212","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8576212","automotive;software;development tools;IDE;ALM;continuous integration;automated testing","Tools;Software;Automotive engineering;Servers;Testing;Pipelines;Industries","automobile industry;mechanical engineering computing;program diagnostics;public domain software;software maintenance;software quality","automotive software development environment;open source technologies;automotive industry;software releases;testing;error checking;software quality;automotive development software;dynamic analysis;static analysis","","","","5","IEEE","16 Dec 2018","","","IEEE","IEEE Conferences"
"Measuring and Understanding the Effectiveness of JIRA Developers Communities","M. Ortu; G. Destefanis; M. Kassab; M. Marchesi","DIEE, University of Cagliari, Italy; CRIM, Computer Research Institute of Montreal, Canada; The Pennsylvania State University, Malvern, PA; DIEE, University of Cagliari, Italy","2015 IEEE/ACM 6th International Workshop on Emerging Trends in Software Metrics","6 Aug 2015","2015","","","3","10","Tools for project management and issues/bugs tracking are becoming useful for governing the development process of Open Source software. Such tools simplify the communications process among developers and ensure the scalability of a project. The more information developers are able to exchange, the clearer are the goals, and the higher is the number of developers keen on joining and actively collaborating on a project. In this paper we present a preliminary empirical analysis of the communities-structure of developers in JIRA by analyzing 7 popular projects hosted in the repository. We analyze how these communities perform in terms of issue-resolution time of any given issue. The main contributions of this work are the confirmation of the existence of communities in developer networks, and the empirical finding that the issue resolution-time of any given issue is not correlated with the dimension of a developer community.","2327-0969","978-1-4673-7103-2","10.1109/WETSoM.2015.10","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7181585","Empirical Software Engineering;Mining Software Repositories","Communities;Maintenance engineering;Open source software;Productivity;Electronic mail;Project management","public domain software;software engineering","JIRA developers communities;project management;open source software","","21","","27","IEEE","6 Aug 2015","","","IEEE","IEEE Conferences"
"Where to Go Now? Finding Alternatives for Declining Packages in the npm Ecosystem","S. Mujahid; D. E. Costa; R. Abdalkareem; E. Shihab","Mozilla Corporation, Montreal, Canada; Université du Québec à Montréal, Montreal, Canada; Omar Al-Mukhtar University, Bayda, Libya; Concordia University, Montreal, Canada","2023 38th IEEE/ACM International Conference on Automated Software Engineering (ASE)","8 Nov 2023","2023","","","1628","1639","Software ecosystems (e.g., npm, PyPI) are the backbone of modern software developments. Developers add new packages to ecosystems every day to solve new problems or provide alternative solutions, causing obsolete packages to decline in their importance to the community. Packages in decline are reused less over time and may become less frequently maintained. Thus, developers usually migrate their dependencies to better alternatives. Replacing packages in decline with better alternatives requires time and effort by developers to identify packages that need to be replaced, find the alternatives, asset migration benefits, and finally, perform the migration. This paper proposes an approach that automatically identifies packages that need to be replaced and finds their alternatives supported with real-world examples of open source projects performing the suggested migrations. At its core, our approach relies on the dependency migration patterns performed in the ecosystem to suggest migrations to other developers. We evaluated our approach on the npm ecosystem and found that 96% of the suggested alternatives are accurate. Furthermore, by surveying expert JavaScript developers, 67% of them indicate that they will use our suggested alternative packages in their future projects.","2643-1572","979-8-3503-2996-4","10.1109/ASE56229.2023.00119","Concordia University's Research Ethics Board(grant numbers:3000472); ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10298593","Dependency Suggestions;Dependency Quality;Package in decline;Dependency;npm;JavaScript","Codes;Ecosystems;Semantics;Maintenance engineering;Market research;Software;Software engineering","","","","","","59","IEEE","8 Nov 2023","","","IEEE","IEEE Conferences"
"Complex Network Analysis in a Software Ecosystem: Studying the Eclipse Community","H. Guercio; V. Stroele; J. M. N. David; R. Braga; F. Campos","PGCC, Federal University of Juiz de Fora Juiz, de Fora, Brazil; PGCC, Federal University of Juiz de Fora Juiz, de Fora, Brazil; PGCC, Federal University of Juiz de Fora Juiz, de Fora, Brazil; PGCC, Federal University of Juiz de Fora Juiz, de Fora, Brazil; PGCC, Federal University of Juiz de Fora Juiz, de Fora, Brazil","2018 IEEE 22nd International Conference on Computer Supported Cooperative Work in Design ((CSCWD))","16 Sep 2018","2018","","","618","623","In the information age, people are getting more and more connected. In this context, collaborative activities are accomplished in different domains, and their relations allow researchers to model them as complex networks in order to obtain insights and competitive advantage. Software Ecosystems are emerging as a new way to contribute to developing and maintaining software through an active community of engaged users. Recognizing how users collaborate is a complex task that can help understand the network. This paper aims at analyzing a Software Ecosystem through its social layer. To this end, different complex networks were modeled using data extracted from the Eclipse ecosystem version control system. The networks represent interactions among users and projects. The network analyses conducted indicate the viability of using this approach to recognize important contributors in the ecosystem.","","978-1-5386-1482-2","10.1109/CSCWD.2018.8465170","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8465170","","Ecosystems;Software;Collaboration;Mathematical model;Data mining;Complex networks;Data models","complex networks;object-oriented programming;public domain software;software maintenance;software prototyping","software maintenance;complex network analysis;network analyses;Eclipse ecosystem version control system;complex task;engaged users;active community;collaborative activities;information age;eclipse community;software ecosystem","","1","","14","IEEE","16 Sep 2018","","","IEEE","IEEE Conferences"
"How do Developers Really Feel About Bug Fixing? Directions for Automatic Program Repair","E. Winter; D. Bowes; S. Counsell; T. Hall; S. Haraldsson; V. Nowack; J. Woodward","School of Computing and Communications, Lancaster University, Lancaster, U.K.; School of Computing and Communications, Lancaster University, Lancaster, U.K.; Department of Computer Science, Brunel University of London, Uxbridge, U.K.; School of Computing and Communications, Lancaster University, Lancaster, U.K.; Department of Computing Science and Mathematics, University of Stirling, Stirling, U.K.; School of Computing and Communications, Lancaster University, Lancaster, U.K.; School of Electronic Engineering and Computer Science, Queen Mary University of London, London, U.K.","IEEE Transactions on Software Engineering","18 Apr 2023","2023","49","4","1823","1841","Automatic program repair (APR) is a rapidly advancing field of software engineering that aims to supplement or replace manual bug fixing with an automated tool. For APR to be successfully adopted in industry, it is vital that APR tools respond to developer needs and preferences. However, very little research has considered developers’ general attitudes to APR or developers’ current bug fixing practices (the activity APR aims to replace). This article responds to this gap by reporting on a survey of 386 software developers about their bug finding and fixing practices and experiences, and their instinctive attitudes towards APR. We find that bug finding and fixing is not necessarily as onerous for developers as has often been suggested, being rated as more satisfying than developers’ general work. The fact that developers derive satisfaction and benefit from bug fixing indicates that APR adoption is not as simple as APR replacing an unwanted activity. When it comes to potential APR approaches, we find a strong preference for developers being kept in the loop (for example, choosing between different fixes or validating fixes) as opposed to a fully automated process. This suggests that advances in APR should be careful to consider the agency of the developer, as well as what information is presented to developers alongside fixes. It also indicates that there are key barriers related to trust that would need to be overcome for full scale APR adoption, supported by the fact that even those developers who stated that they were positive about APR listed several caveats and concerns. We find very few statistically significant relationships between particular demographic variables (for example, developer experience, age, education) and key attitudinal variables, suggesting that developers’ instinctive attitudes towards APR are little influenced by experience level but are held widely across the developer community.","1939-3520","","10.1109/TSE.2022.3194188","Engineering and Physical Sciences Research Council(grant numbers:EP/S005730/1); ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9842369","","Computer bugs;Software;Debugging;Automation;Maintenance engineering;Task analysis;Manuals","program debugging;program testing;software engineering","activity APR;APR tools;automatic program repair;bug finding;developer community;developer experience;fixing practices;manual bug fixing;scale APR adoption","","2","","60","CCBY","27 Jul 2022","","","IEEE","IEEE Journals"
"Web services container reference architecture (WSCRA)","A. Dhesiaseelan; A. Ragunathan","Hewlett Packard Company, USA; Hewlett Packard Company, USA","Proceedings. IEEE International Conference on Web Services, 2004.","19 Jul 2004","2004","","","806","807","Today, Web services are pervasive and omnipresent in the Internet and within enterprises. Even though there are massive Web services specifications development underway, early adoption by developers and tool vendors is becoming a need. The potential growth of this technology is highly predictable because of its universal acceptance and use among the developer community. This industry may expect to grow enormously based on the support from various communities that benefit from this technology. Researches are carried out in various standards bodies on various aspects of Web services such as definition, architecture, security, discovery, interoperability, etc. As we are committed to the success of this technology, we need to research on service oriented containers that makes Web services potential more constructive. This paper proposes a container for Web services which can manage and monitor the state and behavior of Web services, which may address the quality of service (QoS) factor for Web services.","","0-7695-2167-3","10.1109/ICWS.2004.1314828","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1314828","","Web services;Containers;Service oriented architecture;Security;Monitoring;Quality of service;Collaboration;Proposals;Availability;Companies","open systems;security of data;Internet;quality of service;formal specification;system monitoring;software maintenance;ubiquitous computing","Web service container reference architecture;WSCRA;pervasive computing;Internet;Web service specification;Web service definition;Web service security;Web service discovery;Web service interoperability;service oriented containers;Web service behavior manage;state monitoring;quality of service;QoS factor;legacy systems","","14","","4","IEEE","19 Jul 2004","","","IEEE","IEEE Conferences"
"Runtime Permission Issues in Android Apps: Taxonomy, Practices, and Ways Forward","Y. Wang; Y. Wang; S. Wang; Y. Liu; C. Xu; S. -C. Cheung; H. Yu; Z. Zhu","Software College, Northeasthern University, Shenyang, Liaoning, China; Software College, Northeasthern University, Shenyang, Liaoning, China; Department of Computer Science and Engineering, Research Institute of Trustworthy Autonomous Systems, Guangdong Provincial Key Laboratory of Brain-inspired Intelligent Computation, Southern University of Science and Technology, Shenzhen, Guangdong, China; Department of Computer Science and Engineering, Research Institute of Trustworthy Autonomous Systems, Guangdong Provincial Key Laboratory of Brain-inspired Intelligent Computation, Southern University of Science and Technology, Shenzhen, Guangdong, China; Department of Computer Science and Technology, State Key Lab for Novel Software Technology, Nanjing University, Nanjing, Jiangsu, China; The Hong Kong University of Science and Technology, Hong Kong; Software College, Northeasthern University, Shenyang, Liaoning, China; Software College, Northeasthern University, Shenyang, Liaoning, China","IEEE Transactions on Software Engineering","6 Jan 2023","2023","49","1","185","210","Android introduces a new permission model that allows apps to request permissions at runtime rather than at the installation time since 6.0 (Marshmallow, API level 23). While this runtime permission model provides users with greater flexibility in controlling an app's access to sensitive data and system features, it brings new challenges to app development. First, as users may grant or revoke permissions at any time while they are using an app, developers need to ensure that the app properly checks and requests required permissions before invoking any permission-protected APIs. Second, Android's permission mechanism keeps evolving and getting customized by device manufacturers. Developers are expected to comprehensively test their apps on different Android versions and device models to make sure permissions are properly requested in all situations. Unfortunately, these requirements are often impractical for developers. In practice, many Android apps suffer from various runtime permission issues (ARP issues). While existing studies have explored ARP issues, the understanding of such issues is still preliminary. To better characterize ARP issues, we performed an empirical study using 135 Stack Overflow posts that discuss ARP issues and 199 real ARP issues archived in popular open-source Android projects on GitHub. Via analyzing the data, we observed 11 types of ARP issues that commonly occur in Android apps. For each type of issues, we systematically studied: (1) how they can be manifested, (2) how pervasive and serious they are in real-world apps, and (3) how they can be fixed. We also analyzed the evolution trend of different types of issues from 2015 to 2020 to understand their impact on the Android ecosystem. Furthermore, we conducted a field survey and in-depth interviews among the practitioners from open-source community and industry, to gain insights from practitioners’ practices and learn their requirements of tools that can help combat ARP issues. Finally, to understand the strengths and weaknesses of the existing tools that can detect ARP issues, we built ARPBench, an open benchmark consisting of 94 real ARP issues, and evaluated the performance of three available tools. The experimental results indicate that the existing tools have very limited supports for detecting our observed issue types and report a large number of false alarms. We further analyzed the tools’ limitations and summarized the challenges of designing an effective ARP issue detection technique. We hope that our findings can shed light on future research and provide useful guidance to practitioners.","1939-3520","","10.1109/TSE.2022.3148258","National Natural Science Foundation of China(grant numbers:61932021,62141210,61902056,61802164,61977014); The Hong Kong RGC/GRF(grant numbers:16211919); MSRA(grant numbers:MHP/055/19,PiH/255/21); Guandong Basic and Applied Basic Research Fundation(grant numbers:2021A1515011562); Guangdong Provincial Key Laboratory(grant numbers:2020B121201001); Shenyang Young and Middle-aged Talent Support Program(grant numbers:ZX20200272); Open Fund of State Key Laboratory for Novel Software Technology; Nanjing University(grant numbers:KFKT2021B01); ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9705152","Runtime permission;Android apps;empirical study","Runtime;Interviews;Open source software;Taxonomy;Task analysis;Systematics;Software development management","Android (operating system);application program interfaces;mobile computing;public domain software;smart phones","Android apps;Android's permission mechanism;app development;app properly checks;ARP issues;effective ARP issue detection technique;permission-protected APIs;runtime permission issues;runtime permission model","","3","","112","IEEE","4 Feb 2022","","","IEEE","IEEE Journals"
