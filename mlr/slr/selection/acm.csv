series,location,keywords,numpages,pages,booktitle,abstract,doi,url,address,publisher,isbn,year,title,author,ENTRYTYPE,ID,articleno
ICSEW'20,"Seoul, Republic of Korea","Downstream/Upstream development, Cross-bugs, Dependencies, Software Ecosystem",2,723–724,Proceedings of the IEEE/ACM 42nd International Conference on Software Engineering Workshops,"Despite the proliferation of software ecosystems (SECOs), growing a sustainable and healthy SECO remains a significant challenge. One approach to mitigate this challenge is the utilization of a mechanism that collects feedback from distributors (distros) and end-users of the SECO releases. This presentation aims at investigating the effectiveness of the feedback mechanism implemented by OpenStack to address the needs of end-users and distros. I mined the OpenStack repositories and mapped 20 distros' bug-related activities. Results suggest that OpenStack releases are actively maintained for 18 months before reaching end-of-life (EOL), which makes coordination with distros difficult because distros usually provide services to their end-users for a period between 36 - 60 months before reaching EOL. Also, bugs are fixed faster by the distros (7 - 76 days) than the OpenStack community (average of 4 months). However, only 22% of the bugs addressed by OpenStack distros are pushed back upstream.",10.1145/3387940.3392188,https://doi.org/10.1145/3387940.3392188,"New York, NY, USA",Association for Computing Machinery,9781450379632,2020,Cross-Distribution Feedback in Software Ecosystems,"Foundjem, Armstrong",inproceedings,10.1145/3387940.3392188,
ICSE '11,"Waikiki, Honolulu, HI, USA","mining software repositories, empirical studies, software ecosystems",4,904–907,Proceedings of the 33rd International Conference on Software Engineering,"When the Application Programming Interface (API) of a framework or library changes, its clients must be adapted. This change propagation - known as a ripple effect - is a problem that has garnered interest: several approaches have been proposed in the literature to react to these changes.Although studies of ripple effects exist at the single system level, no study has been performed on the actual extent and impact of these API changes in practice, on an entire software ecosystem associated with a community of developers. This paper reports on early results of such an empirical study of API changes that led to ripple effects across an entire ecosystem. Our case study subject is the development community gravitating aroung the Squeak and Pharo software ecosystems: six years of evolution, nearly 3,000 contributors, and close to 2,500 distinct systems.",10.1145/1985793.1985940,https://doi.org/10.1145/1985793.1985940,"New York, NY, USA",Association for Computing Machinery,9781450304450,2011,A Study of Ripple Effects in Software Ecosystems (NIER Track),"Robbes, Romain and Lungu, Mircea",inproceedings,10.1145/1985793.1985940,
VaMoS '15,"Hildesheim, Germany","software product lines, multi-repository software, software ecosystems, variability management",6,103–108,Proceedings of the 9th International Workshop on Variability Modelling of Software-Intensive Systems,"Variability is a significant source of complexity in many large-scale software systems. Software variability must be managed in order to effectively tame the arising complexity. Consequently, variability management processes are at the heart of current software product line engineering practices. However, legacy software systems exist that have not been developed with such practices. Moreover, an increasing amount of software is developed in large, fragmented communities, also referred to as software ecosystems. Variability in such systems is often not explicitly managed and causes significant difficulties during software maintenance and evolution. Methods and tools for uncovering and explicitly managing this variability have been subject to ongoing research. This paper presents our research in progress of empirically studying the application and combination of such methods in the context of real-world industrial case study in the health care domain.",10.1145/2701319.2701333,https://doi.org/10.1145/2701319.2701333,"New York, NY, USA",Association for Computing Machinery,9781450332736,2015,Uncovering Variability Models for Software Ecosystems from Multi-Repository Structures,"Weber, Jens H. and Katahoire, Anita and Price, Morgan",inproceedings,10.1145/2701319.2701333,
IWPSE-EVOL '10,"Antwerp, Belgium",,6,42–47,Proceedings of the Joint ERCIM Workshop on Software Evolution (EVOL) and International Workshop on Principles of Software Evolution (IWPSE),"Nowadays, most empirical studies in open source software evolution are based on the analysis of program code alone. In order to get a better understanding of how software evolves over time, many more entities that are part of the software ecosystem need to be taken into account. We present a general framework to automate the analysis of the evolution of software ecosystems. The framework incorporates a database that stores all relevant information obtained thanks to several mining tools, and provides a unified data source to visualisation tools. One such visualisation tool is integrated in order to get a first quick overview of the evolution of different aspects of the software project under study. The framework is extensible in order to accommodate more and different types of input and output, depending on the needs of the user. We compare our framework against existing solutions, and show how we can use this framework for carrying out concrete ecosystem evolution experiments.",10.1145/1862372.1862384,https://doi.org/10.1145/1862372.1862384,"New York, NY, USA",Association for Computing Machinery,9781450301282,2010,A Framework for Analysing and Visualising Open Source Software Ecosystems,"Goeminne, Mathieu and Mens, Tom",inproceedings,10.1145/1862372.1862384,
MISE '17,"Buenos Aires, Argentina","e-learning, software supply network, virtual learning environment, software ecosystem, modeling",7,47–53,Proceedings of the 9th International Workshop on Modelling in Software Engineering,"Software-intensive systems have become increasingly ubiquitous, large, and complex, with dissemination in several application domains and tightly dependent upon different technologies. Such systems are usually centered in a software platform so that increasing attention has been paid to influence and interdependency in relationships among all the involved players, forming software ecosystems (SECO). Despite the initial advances in SECO research, few analytical models, case studies with real data, and integrated tool support exist. A great barrier for the evolution of the field towards aiding decision-making in the real industry is the lack of SECO modeling support. In this paper, we aim to perform an exploratory study on the need for modeling in the SECO field. We preliminarily identified some modeling elements from the SECO literature and explored them in the context of a real SECO in the educational domain.",,,,IEEE Press,9781538604267,2017,An Exploratory Study on the Need for Modeling Software Ecosystems: The Case of SOLAR SECO,"Coutinho, Emanuel Ferreira and Viana, Davi and dos Santos, Rodrigo Pereira",inproceedings,10.5555/3104068.3104081,
SAC '23,"Tallinn, Estonia","trust, autonomous systems, dynamic software ecosystems, software engineering, survey",8,1490–1497,Proceedings of the 38th ACM/SIGAPP Symposium on Applied Computing,"Software systems across various application domains are undergoing a major shift, from static systems of systems to dynamic ecosystems characterized by largely autonomous software agents, engaging in mutual coalitions and partnerships to complete complex collaborative tasks. One of the key challenges facing software engineering along with this shift, is our preparedness to leverage the concept of mutual trust building among the dynamic system components, to support safe collaborations with (possibly malicious or misbehaving) components outside the boundaries of our control. To support safe evolution towards dynamic software ecosystems, this paper examines the current progress in the research on trust in software engineering across various application domains. To this end, it presents a survey of existing work in this area, and suggests the directions in which further research is needed. These directions include the research of social metrics supporting trust assessment, fine-grained quantification of trust-assessment results, and opening the discussion on governance mechanisms responsible for trust-score management and propagation across the integrated software ecosystems.",10.1145/3555776.3577702,https://doi.org/10.1145/3555776.3577702,"New York, NY, USA",Association for Computing Machinery,9781450395175,2023,Survey on Trust in Software Engineering for Autonomous Dynamic Ecosystems,"Buhnova, Barbora and Halasz, David and Iqbal, Danish and Bangui, Hind",inproceedings,10.1145/3555776.3577702,
ICSE '21,"Madrid, Spain","permission system, security, design trade-offs, package management, sand-boxing, supply-chain security, malicious package updates",13,1334–1346,Proceedings of the 43rd International Conference on Software Engineering,"The large amount of third-party packages available in fast-moving software ecosystems, such as Node.js/npm, enables attackers to compromise applications by pushing malicious updates to their package dependencies. Studying the npm repository, we observed that many packages in the npm repository that are used in Node.js applications perform only simple computations and do not need access to filesystem or network APIs. This offers the opportunity to enforce least-privilege design per package, protecting applications and package dependencies from malicious updates. We propose a lightweight permission system that protects Node.js applications by enforcing package permissions at runtime. We discuss the design space of solutions and show that our system makes a large number of packages much harder to be exploited, almost for free.",10.1109/ICSE43902.2021.00121,https://doi.org/10.1109/ICSE43902.2021.00121,,IEEE Press,9781450390859,2021,Containing Malicious Package Updates in Npm with a Lightweight Permission System,"Ferreira, Gabriel and Jia, Limin and Sunshine, Joshua and Kästner, Christian",inproceedings,10.1109/ICSE43902.2021.00121,
FSE '12,"Cary, North Carolina","ecosystems, empirical studies, mining software repositories",11,,Proceedings of the ACM SIGSOFT 20th International Symposium on the Foundations of Software Engineering,"When the Application Programming Interface (API) of a framework or library changes, its clients must be adapted. This change propagation---known as a ripple effect---is a problem that has garnered interest: several approaches have been proposed in the literature to react to these changes.Although studies of ripple effects exist at the single system level, no study has been performed on the actual extent and impact of these API changes in practice, on an entire software ecosystem associated with a community of developers. This paper reports on an empirical study of API deprecations that led to ripple effects across an entire ecosystem. Our case study subject is the development community gravitating around the Squeak and Pharo software ecosystems: seven years of evolution, more than 3,000 contributors, and more than 2,600 distinct systems. We analyzed 577 methods and 186 classes that were deprecated, and answer research questions regarding the frequency, magnitude, duration, adaptation, and consistency of the ripple effects triggered by API changes.",10.1145/2393596.2393662,https://doi.org/10.1145/2393596.2393662,"New York, NY, USA",Association for Computing Machinery,9781450316149,2012,How Do Developers React to API Deprecation? The Case of a Smalltalk Ecosystem,"Robbes, Romain and Lungu, Mircea and Röthlisberger, David",inproceedings,10.1145/2393596.2393662,56
GPCE 2017,"Vancouver, BC, Canada","build-system, build maintenance, GNU Autotool, Autoconf",11,176–186,Proceedings of the 16th ACM SIGPLAN International Conference on Generative Programming: Concepts and Experiences,"Build systems are crucial for software system development, however there is a lack of tool support to help with their high maintenance overhead. GNU Autotools are widely used in the open source community, but users face various challenges from its hard to comprehend nature and staging of multiple code generation steps, often leading to low quality and error-prone build code. In this paper, we present a platform, AutoHaven, to provide a foundation for developers to create analysis tools to help them understand, maintain, and migrate their GNU Autotools build systems. Internally it uses approximate parsing and symbolic analysis of the build logic. We illustrate the use of the platform with two tools: ACSense helps developers to better understand their build systems and ACSniff detects build smells to improve build code quality. Our evaluation shows that AutoHaven can support most GNU Autotools build systems and can detect build smells in the wild.",10.1145/3136040.3136051,https://doi.org/10.1145/3136040.3136051,"New York, NY, USA",Association for Computing Machinery,9781450355247,2017,Four Languages and Lots of Macros: Analyzing Autotools Build Systems,"Al-Kofahi, Jafar M. and Kothari, Suresh and Kästner, Christian",inproceedings,10.1145/3136040.3136051,
CSD '15,"Florence, Italy",,5,15–19,Proceedings of the Second International Workshop on Context for Software Development,"Contemporary large software systems rely on complex software ecosystems for managing infrastructural tasks. While these ecosystems facilitate software development, the software architect must put care in not relying on assumptions on behaviors and policies of the ecosystem that may change with platform evolution. Based on our experience with developing analyses within MARPLE, a framework for software comprehension and architecture reconstruction, we propose an abstract, context-aware style for specifying software. In the spirit of decoupling computation from coordination, this style decouples the specification of the computations to be performed from the specification of the contexts where they must take place. Software described in this way exposes its primitives at a level of abstraction closer to that of the framework, enabling better reasoning on the features of the design, easing correct implementation, and fostering a better interaction between the software and the framework it relies on.",,,,IEEE Press,,2015,A Context-Aware Style of Software Design,"Fontana, Francesca Arcelli and Braione, Pietro and Roveda, Riccardo and Zanoni, Marco",inproceedings,10.5555/2819366.2819374,
ICSE '15,"Florence, Italy",,12,403–414,Proceedings of the 37th International Conference on Software Engineering - Volume 1,"In past and recent years, the issues related to managing technical debt received significant attention by researchers from both industry and academia. There are several factors that contribute to technical debt. One of these is represented by code bad smells, i.e., symptoms of poor design and implementation choices. While the repercussions of smells on code quality have been empirically assessed, there is still only anecdotal evidence on when and why bad smells are introduced. To fill this gap, we conducted a large empirical study over the change history of 200 open source projects from different software ecosystems and investigated when bad smells are introduced by developers, and the circumstances and reasons behind their introduction. Our study required the development of a strategy to identify smell-introducing commits, the mining of over 0.5M commits, and the manual analysis of 9,164 of them (i.e., those identified as smell-introducing). Our findings mostly contradict common wisdom stating that smells are being introduced during evolutionary tasks. In the light of our results, we also call for the need to develop a new generation of recommendation systems aimed at properly planning smell refactoring activities.",,,,IEEE Press,9781479919345,2015,When and Why Your Code Starts to Smell Bad,"Tufano, Michele and Palomba, Fabio and Bavota, Gabriele and Oliveto, Rocco and Di Penta, Massimiliano and De Lucia, Andrea and Poshyvanyk, Denys",inproceedings,10.5555/2818754.2818805,
VaMoS '17,"Eindhoven, Netherlands","web-apps, case study, variability-related analyses",8,44–51,Proceedings of the 11th International Workshop on Variability Modelling of Software-Intensive Systems,"Though variability is everywhere, there has always been a shortage of publicly available cases for assessing variability-aware tools and techniques as well as supports for teaching variability-related concepts. Historical software product lines contains industrial secrets their owners do not want to disclose to a wide audience. The open source community contributed to large-scale cases such as Eclipse, Linux kernels, or web-based plugin systems (Drupal, WordPress). To assess accuracy of sampling and prediction approaches (bugs, performance), a case where all products can be enumerated is desirable. As configuration issues do not lie within only one place but are scattered across technologies and assets, a case exposing such diversity is an additional asset. To this end, we present in this paper our efforts in building an explicit product line on top of JHipster, an industrial open-source Web-app configurator that is both manageable in terms of configurations (≈ 163,000) and diverse in terms of technologies used. We present our efforts in building a variability-aware chain on top of JHipster's configurator and lessons learned using it as a teaching case at the University of Rennes. We also sketch the diversity of analyses that can be performed with our infrastructure as well as early issues found using it. Our long term goal is both to support students and researchers studying variability analysis and JHipster developers in the maintenance and evolution of their tools.",10.1145/3023956.3023963,https://doi.org/10.1145/3023956.3023963,"New York, NY, USA",Association for Computing Machinery,9781450348119,2017,Yo Variability! JHipster: A Playground for Web-Apps Analyses,"Halin, Axel and Nuttinck, Alexandre and Acher, Mathieu and Devroey, Xavier and Perrouin, Gilles and Heymans, Patrick",inproceedings,10.1145/3023956.3023963,
,"Amsterdam, The Netherlands",,,,,"It is our great pleasure to welcome you to the 1st International Workshop on Open Component Ecosystem -- IWOCE 2009, whose goal is to gather together both researchers and practitioners active in open source software engineering, software composition, algorithms, constraint programming, and model-driven engineering to discuss, debate, exchange ideas, and outline common solutions to the problem of static and dynamic component aggregations in software ecosystems.Over the last years, the composition of software parts is increasingly considered a crucial operation to build and maintain large software systems. The continuous and independent evolution of readily available components suggested that open platforms can better accommodate and manage them as normally happens in systems like open source software distributions, Eclipse, and J2EE, just to mention a few. The critical mass represented by such software components requires organizations, such as companies, research groups, and open source communities, to collaborate on custom software development, implementation and shared services. Such infrastructures can be regarded as ecosystems, i.e., collections of software projects that possibly belong to organizations, developed in parallel by the organizations, and able to integrate each other at assembly time, during the configuration, and/or dynamically after the deployment.The capability of modeling, analyzing, and predicting the component behavior during these stages is intrinsically difficult and requires techniques, algorithms, and methods which are both expressive and computationally convenient in order to be engineered and conveyed in practical projects. Moreover, when analyzing software ecosystems, exploration and visualization cannot be neglected because of the large amounts of information that are available about the ecosystem.The call for papers attracted 6 submissions from Canada, Europe, and the United States. The program committee accepted 5 papers that cover some of the central topics of IWOCE, focusing in particular on component ecosystem deployment, configuation and modeling.",,,"New York, NY, USA",Association for Computing Machinery,9781605586779,2009,IWOCE '09: Proceedings of the 1st International Workshop on Open Component Ecosystems,,proceedings,10.1145/1595800,
GSD '06,"Shanghai, China","global software development, empirical studies, onion model, libre software, membership integration",7,27–33,Proceedings of the 2006 International Workshop on Global Software Development for the Practitioner,"Libre (free / open source) software is a good example of global software development. Thousands of projects, in a wide range of domains which involve hundreds of thousands of developers and contributors from all around the world. Some large (both in size and developer community) libre software projects have shown evidence of producing code with complete functionality and fast evolution (with linear or superlinear growth), while maintaining low defect density. Many companies are exploring how to benefit from this situation, considering several approaches related to libre software development. For instance, some of them have hired full-time developers, focusing their work on some libre software projects they consider strategic.However, before joining the core development team of the project, these hired developers have to follow a process of software comprehension, and get used to the rules and communication mechanisms used in the project. We were interested in the differences between this case and that of volunteer developers working in the same project, Therefore, we studied the duration and basic characteristics of this joining process for the developers of GNOME (a well known, large, libre software project). In our analysis, we have found two groups with clearly different joining patterns. Moreover, we have related those patterns to the different behaviors of volunteer and hired developers: volunteers tend to follow a step-by-step joining process, while hired developers usually experiencea ""sudden"" integration. Some reasons for this different behavior are also discussed.",10.1145/1138506.1138513,https://doi.org/10.1145/1138506.1138513,"New York, NY, USA",Association for Computing Machinery,1595934049,2006,The Processes of Joining in Global Distributed Software Projects,"Herraiz, Israel and Robles, Gregorio and Amor, Juan JosÉ and Romera, Teófilo and González Barahona, Jesús M.",inproceedings,10.1145/1138506.1138513,
